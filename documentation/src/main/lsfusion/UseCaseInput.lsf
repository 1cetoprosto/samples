MODULE InputUseCase;

//#sample1
CLASS Book 'Книга';
name 'Наименование' = DATA VARISTRING[100] (Book);
 
FORM books
     OBJECTS b = Book
;
 
NAVIGATOR {
    NEW books;
}
//#sample1 end

//#solution1
changeName(Book b)  { 
     INPUT s = VARISTRING[100] // вводим VARISTRING[100] "в параметр" s (автоматически оборачивается в REQUEST, то есть доступны групповая корректировки, PASTE и т.п.)
                     DO // проверка на requestCanceled
                          name(b) <- s;
}
  
EXTEND FORM books
    PROPERTIES (b) name ON CHANGE changeName(b)
;
//#solution1 end

//#sample2
CLASS Genre 'Жанр';
name 'Наименование' = DATA VARISTRING[100] (Genre);
 
genre 'Жанр' = DATA Genre (Book);
isForbidden 'Запрет' = DATA BOOLEAN (Book);
  
CLASS Order 'Заказ';
book 'Книга' = DATA Book (Order);
nameBook 'Наименование книги' (Order o) = name(book(o));

date 'Дата' = DATA DATE (Order);
number 'Номер' = DATA VARSTRING[100] (Order);

CONSTRAINT isForbidden(book(Order o)) 
    CHECKED BY book MESSAGE 'Запрещено выбирать эту книгу';
 
FORM booksByGenre
     OBJECTS g = Genre PANEL
     PROPERTIES (g) name
     OBJECTS b = Book
     PROPERTIES (b) name
;
 
 
FORM orders 'Заказы'
    OBJECTS g = Genre PANEL
    PROPERTIES (g) name
    
    OBJECTS o = Order
    PROPERTIES(o) READONLY date, number
    FILTERS g == genre(book(o))
;
 
NAVIGATOR {
    NEW orders;
}
//#sample2 end

//#solution2
changeNameBook(Genre g, Order o)  { 
          DIALOG booksByGenre OBJECTS // (автоматически оборачивается в REQUEST, то есть доступны групповая корректировки, PASTE и т.п.)
                g = g NULL, // разрешен NULL на входе
                b = book(o) NULL INPUT bk NULL CONSTRAINTFILTER
                    // book(o) NULL - подставляем book(o) на вход (при необходимости можно не указывать вход, то есть писать просто b INPUT ..., что в свою очередь эквивалентно b=NULL NULL INPUT ...)
                    // INPUT b NULL - возвращаем значение этого объекта "в параметр" bk (разрешен возврат NULL то есть будет кнопка сбросить). Так как не указана опция TO, результат будет записан в requestedObject
                    // CONSTRAINTFILTER - учитываем для объекта b ограничения из предположения что результат будет записан в свойство передаваемое на вход (в данном случае book(o),
                    // при необходимости можно задать другое выражение в виде CONSTRAINTFILTER = dataBook(o)
    DO // проверка на requestCanceled
        book(o) <- bk;
}
  
EXTEND FORM orders
    PROPERTIES (o) nameBook ON CHANGE changeNameBook(g, o)      
;
//#solution2 end

