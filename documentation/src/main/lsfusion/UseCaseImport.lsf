MODULE UseCaseImport;

//#sample1
REQUIRE Utils;

CLASS Book 'Книга';
name 'Наименование' = DATA ISTRING[100] (Book) IN id;

id 'Код' = DATA STRING[20] (Book) IN id;
book 'Книга' (STRING[20] id) = GROUP AGGR Book b BY id(b);

CLASS Order 'Заказ';
date 'Дата' = DATA DATE (Order);
number 'Номер' = DATA STRING[10] (Order);
  
CLASS OrderDetail 'Строка заказа';
order 'Заказ' = DATA Order (OrderDetail) NONULL DELETE;
  
book 'Книга' = DATA Book (OrderDetail) NONULL;
nameBook 'Книга' (OrderDetail d) = name(book(d));
  
quantity 'Количество' = DATA INTEGER (OrderDetail);
price 'Цена' = DATA NUMERIC[14,2] (OrderDetail);

FORM order 'Заказ'
    OBJECTS o = Order PANEL
    PROPERTIES(o) date, number
  
    OBJECTS d = OrderDetail
    PROPERTIES(d) nameBook, quantity, price, NEW, DELETE
    FILTERS order(d) == o
  
    EDIT Order OBJECT o
;

FORM orders 'Заказы'
    OBJECTS o = Order
    PROPERTIES(o) READONLY date, number
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE
;

NAVIGATOR {
    NEW orders;
}
//#sample1 end

//#solution1
importXlsx 'Импортировать из XLS' (Order o)  { 
    INPUT f = EXCELFILE DO {
    
        LOCAL bookId = STRING[20] (INTEGER);
        LOCAL quantity = INTEGER (INTEGER);
        LOCAL price = NUMERIC[14,2] (INTEGER);
              
        IMPORT XLS FROM f TO bookId = A, quantity = B, price = C;
        
        FOR imported(INTEGER i) NEW d = OrderDetail DO {
            order(d) <- o;
        
            book(d) <- book(bookId(i));
            quantity(d) <- quantity(i);
            price(d) <- price(i);
        } 
    }
} 

EXTEND FORM order
    PROPERTIES(o) importXlsx
;
//#solution1 end

//#sample2
serverDirectory 'Директорий на сервере, из которого импортировать заказы' = DATA STRING[100] ();

EXTEND FORM orders PROPERTIES() serverDirectory;
//#sample2 end

//#solution2
importOrders 'Импортировать заказы из директория' ()  { 

    listFiles('file://' + serverDirectory());  
    
    FOR ISTRING[255] f = fileName(INTEGER j) AND NOT fileIsDirectory(j) DO NEWSESSION {
    
        LOCAL file = FILE ();
        READ 'file://' + serverDirectory() + '/' + f TO file;
        
        LOCAL date = DATE (INTEGER);
        LOCAL number = STRING[10] (INTEGER);
        
        LOCAL bookId = STRING[20] (INTEGER);
        LOCAL quantity = INTEGER (INTEGER);
        LOCAL price = NUMERIC[14,2] (INTEGER);

        IMPORT CSV '|' NOHEADER CHARSET 'CP1251' FROM file() TO date, number, bookId, quantity, price;

        NEW o = Order {
            date(o) <- date(0);
            number(o) <- number(0);
            
            FOR imported(INTEGER i) NEW d = OrderDetail DO {
                order(d) <- o;
                
                book(d) <- book(bookId(i));
                quantity(d) <- quantity(i);
                price(d) <- price(i);
            }
        }

        APPLY;
        move('file://' + serverDirectory() + '/' + f, 'file://' + serverDirectory() + '/' + (IF canceled() THEN 'error/' ELSE 'success/') + f);
    }	
}

EXTEND FORM orders PROPERTIES() importOrders;
//#solution2 end

//#solution3
importBooks 'Импортировать книги' ()  { 
    LOCAL file = FILE ();
    READ 'jdbc:sqlserver://localhost;databaseName=books;User=import;Password=password@SELECT id, name FROM books' TO file;

    LOCAL id = STRING[20] (INTEGER);
    LOCAL name = ISTRING[100] (INTEGER);
    IMPORT TABLE FROM file() TO id, name;
    
    //создаем новые книги
    FOR id(INTEGER i) AND NOT book(id(i)) NEW b = Book DO {
        id(b) <- id(i);
    }
    
    // меняем значения
    FOR id(Book b) == id(INTEGER i) DO {
        name(b) <- name(i);
    }
    
    // удаляем книги
    DELETE Book b WHERE b IS Book AND NOT [ GROUP SUM 1 BY id(INTEGER i)](id(b));
}
//#solution3 end

//#sample4
CLASS OrderDetailInfo 'Строка заказа (расшифровка)';

detail = DATA OrderDetail (OrderDetailInfo) NONULL DELETE;
size = DATA STRING[100] (OrderDetailInfo);
color = DATA STRING[100] (OrderDetailInfo);
quantity = DATA INTEGER (OrderDetailInfo);

EXTEND FORM order
    OBJECTS i = OrderDetailInfo
    PROPERTIES(i) size, color, quantity, NEW, DELETE
    FILTERS detail(i) = d
;
//#sample4 end

//#solution4
version = DATA LOCAL STRING[100]();

GROUP item;
idItem = DATA LOCAL STRING[100] (OrderDetail);

FORM importOrder
    PROPERTIES() version
    
    OBJECTS order = Order
    PROPERTIES(order) date, number
    
    OBJECTS detail = OrderDetail
    PROPERTIES(detail) IN item idItem EXTID 'id'
    PROPERTIES(detail) price
    FILTERS order(detail) = order
    
    OBJECTS detailInfo = OrderDetailInfo IN item EXTID 'info'
    PROPERTIES(detailInfo) size, color, quantity
    FILTERS detail(detailInfo) = detail
;

importOrderFromJSON 'Импорт из JSON' () {
    INPUT f = FILE DO {
        IMPORT importOrder JSON FROM f;
        book(OrderDetail d) <- book(idItem(d)) WHERE idItem(d);
        APPLY;
    } 
}

EXTEND FORM orders
    PROPERTIES() importOrderFromJSON DRAW o TOOLBAR
;
//#solution4 end